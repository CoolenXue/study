#include "errtmr.h"

static const char *g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_STATE_INVSTATE) + 1];

void errstr_MODULE_TIMER_init ()
{
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_ALLOC_INVHANDLE)] = "ERROR_TIMER_ALLOC_INVHANDLE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_ALLOC_INVCB)] = "ERROR_TIMER_ALLOC_INVCB";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_ALLOC_NOTIMER)] = "ERROR_TIMER_ALLOC_NOTIMER";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_FREE_INVHANDLE)] = "ERROR_TIMER_FREE_INVHANDLE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_START_INVHANDLE)] = "ERROR_TIMER_START_INVHANDLE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_START_INVSTATE)] = "ERROR_TIMER_START_INVSTATE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_RESTART_INVHANDLE)] = "ERROR_TIMER_RESTART_INVHANDLE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_RESTART_INVSTATE)] = "ERROR_TIMER_RESTART_INVSTATE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_STOP_INVHANDLE)] = "ERROR_TIMER_STOP_INVHANDLE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_STOP_INVSTATE)] = "ERROR_TIMER_STOP_INVSTATE";
    g_errstr_MODULE_TIMER[MODULE_ERROR(ERROR_TIMER_STATE_INVSTATE)] = "ERROR_TIMER_STATE_INVSTATE";

    g_errstr_array[MODULE_TIMER].available_ = 1;
    g_errstr_array[MODULE_TIMER].last_error_ = MODULE_ERROR(ERROR_TIMER_STATE_INVSTATE);
    g_errstr_array[MODULE_TIMER].error_array_ = g_errstr_MODULE_TIMER;
}
#include "errmpool.h"

static const char *g_errstr_MODULE_MPOOL[MODULE_ERROR(ERROR_MPOOL_FREE_NOTINUSE) + 1];

void errstr_MODULE_MPOOL_init ()
{
    g_errstr_MODULE_MPOOL[MODULE_ERROR(ERROR_MPOOL_CREATE_INVCONTEXT)] = "ERROR_MPOOL_CREATE_INVCONTEXT";
    g_errstr_MODULE_MPOOL[MODULE_ERROR(ERROR_MPOOL_CREATE_INVPTR)] = "ERROR_MPOOL_CREATE_INVPTR";
    g_errstr_MODULE_MPOOL[MODULE_ERROR(ERROR_MPOOL_CREATE_NOPOOL)] = "ERROR_MPOOL_CREATE_NOPOOL";
    g_errstr_MODULE_MPOOL[MODULE_ERROR(ERROR_MPOOL_DELETE_INVHANDLE)] = "ERROR_MPOOL_DELETE_INVHANDLE";
    g_errstr_MODULE_MPOOL[MODULE_ERROR(ERROR_MPOOL_ALLOC_INVHANDLE)] = "ERROR_MPOOL_ALLOC_INVHANDLE";
    g_errstr_MODULE_MPOOL[MODULE_ERROR(ERROR_MPOOL_FREE_INVHANDLE)] = "ERROR_MPOOL_FREE_INVHANDLE";
    g_errstr_MODULE_MPOOL[MODULE_ERROR(ERROR_MPOOL_FREE_OUTOFRANGE)] = "ERROR_MPOOL_FREE_OUTOFRANGE";
    g_errstr_MODULE_MPOOL[MODULE_ERROR(ERROR_MPOOL_FREE_INVALIGNMENT)] = "ERROR_MPOOL_FREE_INVALIGNMENT";
    g_errstr_MODULE_MPOOL[MODULE_ERROR(ERROR_MPOOL_FREE_INVADDR)] = "ERROR_MPOOL_FREE_INVADDR";
    g_errstr_MODULE_MPOOL[MODULE_ERROR(ERROR_MPOOL_FREE_NOTINUSE)] = "ERROR_MPOOL_FREE_NOTINUSE";

    g_errstr_array[MODULE_MPOOL].available_ = 1;
    g_errstr_array[MODULE_MPOOL].last_error_ = MODULE_ERROR(ERROR_MPOOL_FREE_NOTINUSE);
    g_errstr_array[MODULE_MPOOL].error_array_ = g_errstr_MODULE_MPOOL;
}
#include "errheap.h"

static const char *g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_INVMTAIL) + 1];

void errstr_MODULE_HEAP_init ()
{
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_INIT_INVADDR)] = "ERROR_HEAP_INIT_INVADDR";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_INIT_INVALIGN)] = "ERROR_HEAP_INIT_INVALIGN";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_ALLOC_NOTINIT)] = "ERROR_HEAP_ALLOC_NOTINIT";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_ALLOC_INVSIZE)] = "ERROR_HEAP_ALLOC_INVSIZE";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_ALLOC_INVLOC)] = "ERROR_HEAP_ALLOC_INVLOC";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_ALLOC_NOMEM1)] = "ERROR_HEAP_ALLOC_NOMEM1";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_ALLOC_NOMEM2)] = "ERROR_HEAP_ALLOC_NOMEM2";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_ALLOC_INVCONTEXT)] = "ERROR_HEAP_ALLOC_INVCONTEXT";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_NOTINIT)] = "ERROR_HEAP_FREE_NOTINIT";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_INVSIZE)] = "ERROR_HEAP_FREE_INVSIZE";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_INVBUF)] = "ERROR_HEAP_FREE_INVBUF";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_INVMBLOCK1)] = "ERROR_HEAP_FREE_INVMBLOCK1";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_INVMBLOCK2)] = "ERROR_HEAP_FREE_INVMBLOCK2";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_INVMBLOCK3)] = "ERROR_HEAP_FREE_INVMBLOCK3";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_INVMHEAD)] = "ERROR_HEAP_FREE_INVMHEAD";
    g_errstr_MODULE_HEAP[MODULE_ERROR(ERROR_HEAP_FREE_INVMTAIL)] = "ERROR_HEAP_FREE_INVMTAIL";

    g_errstr_array[MODULE_HEAP].available_ = 1;
    g_errstr_array[MODULE_HEAP].last_error_ = MODULE_ERROR(ERROR_HEAP_FREE_INVMTAIL);
    g_errstr_array[MODULE_HEAP].error_array_ = g_errstr_MODULE_HEAP;
}
#include "errctrlc.h"

static const char *g_errstr_MODULE_CTRLC[MODULE_ERROR(ERROR_CTRLC_OPEN_OPENED) + 1];

void errstr_MODULE_CTRLC_init ()
{
    g_errstr_MODULE_CTRLC[MODULE_ERROR(ERROR_CTRLC_OPEN_OPENED)] = "ERROR_CTRLC_OPEN_OPENED";

    g_errstr_array[MODULE_CTRLC].available_ = 1;
    g_errstr_array[MODULE_CTRLC].last_error_ = MODULE_ERROR(ERROR_CTRLC_OPEN_OPENED);
    g_errstr_array[MODULE_CTRLC].error_array_ = g_errstr_MODULE_CTRLC;
}
#include "errcon.h"

static const char *g_errstr_MODULE_CONSOLE[MODULE_ERROR(ERROR_CONSOLE_OPEN_OPENED) + 1];

void errstr_MODULE_CONSOLE_init ()
{
    g_errstr_MODULE_CONSOLE[MODULE_ERROR(ERROR_CONSOLE_OPEN_OPENED)] = "ERROR_CONSOLE_OPEN_OPENED";

    g_errstr_array[MODULE_CONSOLE].available_ = 1;
    g_errstr_array[MODULE_CONSOLE].last_error_ = MODULE_ERROR(ERROR_CONSOLE_OPEN_OPENED);
    g_errstr_array[MODULE_CONSOLE].error_array_ = g_errstr_MODULE_CONSOLE;
}
#include "errclock.h"

static const char *g_errstr_MODULE_CLOCK[MODULE_ERROR(ERROR_CLOCK_CONTROL_INVOPT) + 1];

void errstr_MODULE_CLOCK_init ()
{
    g_errstr_MODULE_CLOCK[MODULE_ERROR(ERROR_CLOCK_OPEN_OPENED)] = "ERROR_CLOCK_OPEN_OPENED";
    g_errstr_MODULE_CLOCK[MODULE_ERROR(ERROR_CLOCK_CONTROL_INVOPT)] = "ERROR_CLOCK_CONTROL_INVOPT";

    g_errstr_array[MODULE_CLOCK].available_ = 1;
    g_errstr_array[MODULE_CLOCK].last_error_ = MODULE_ERROR(ERROR_CLOCK_CONTROL_INVOPT);
    g_errstr_array[MODULE_CLOCK].error_array_ = g_errstr_MODULE_CLOCK;
}
#include "errdev.h"

static const char *g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DEVICE_CONTROL_NOTSUPPORT) + 1];

void errstr_MODULE_DEVICE_init ()
{
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DRIVER_NODRV)] = "ERROR_DRIVER_NODRV";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DRIVER_INVSTATE)] = "ERROR_DRIVER_INVSTATE";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DRIVER_INVNAME)] = "ERROR_DRIVER_INVNAME";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DRIVER_INVOPT)] = "ERROR_DRIVER_INVOPT";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DRIVER_INSTALLED)] = "ERROR_DRIVER_INSTALLED";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DEVICE_REGISTER_INVNAME)] = "ERROR_DEVICE_REGISTER_INVNAME";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DEVICE_REGISTER_INVHANDLE)] = "ERROR_DEVICE_REGISTER_INVHANDLE";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DEVICE_REGISTER_NODRV)] = "ERROR_DEVICE_REGISTER_NODRV";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DEVICE_OPEN_INVNAME)] = "ERROR_DEVICE_OPEN_INVNAME";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DEVICE_OPEN_NODRV)] = "ERROR_DEVICE_OPEN_NODRV";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DEVICE_OPEN_NODEV)] = "ERROR_DEVICE_OPEN_NODEV";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DEVICE_OPEN_INVSTATE)] = "ERROR_DEVICE_OPEN_INVSTATE";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DEVICE_CLOSE_INVHANDLE)] = "ERROR_DEVICE_CLOSE_INVHANDLE";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DEVICE_READ_INVHANDLE)] = "ERROR_DEVICE_READ_INVHANDLE";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DEVICE_READ_NOTSUPPORT)] = "ERROR_DEVICE_READ_NOTSUPPORT";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DEVICE_WRITE_INVHANDLE)] = "ERROR_DEVICE_WRITE_INVHANDLE";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DEVICE_WRITE_NOTSUPPORT)] = "ERROR_DEVICE_WRITE_NOTSUPPORT";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DEVICE_CONTROL_INVHANDLE)] = "ERROR_DEVICE_CONTROL_INVHANDLE";
    g_errstr_MODULE_DEVICE[MODULE_ERROR(ERROR_DEVICE_CONTROL_NOTSUPPORT)] = "ERROR_DEVICE_CONTROL_NOTSUPPORT";

    g_errstr_array[MODULE_DEVICE].available_ = 1;
    g_errstr_array[MODULE_DEVICE].last_error_ = MODULE_ERROR(ERROR_DEVICE_CONTROL_NOTSUPPORT);
    g_errstr_array[MODULE_DEVICE].error_array_ = g_errstr_MODULE_DEVICE;
}
#include "errsync.h"

static const char *g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_QUEUE_FULL_INVHANDLE) + 1];

void errstr_MODULE_SYNC_init ()
{
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_SYNC_INIT_INVINIT)] = "ERROR_SYNC_INIT_INVINIT";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_SYNC_INIT_INVCONTEXT)] = "ERROR_SYNC_INIT_INVCONTEXT";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_SYNC_ALLOC_INVCONTEXT)] = "ERROR_SYNC_ALLOC_INVCONTEXT";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_SYNC_ALLOC_NOOBJ)] = "ERROR_SYNC_ALLOC_NOOBJ";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_SYNC_FREE_INVCONTEXT)] = "ERROR_SYNC_FREE_INVCONTEXT";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_SYNC_FREE_INVHANDLE)] = "ERROR_SYNC_FREE_INVHANDLE";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_SYNC_FREE_DELETED)] = "ERROR_SYNC_FREE_DELETED";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_SYNC_ENTER_INVHANDLE)] = "ERROR_SYNC_ENTER_INVHANDLE";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_SYNC_ENTER_INVTASK)] = "ERROR_SYNC_ENTER_INVTASK";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_SYNC_ENTER_INVCONTEXT)] = "ERROR_SYNC_ENTER_INVCONTEXT";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_SYNC_ENTER_TRYAGAIN)] = "ERROR_SYNC_ENTER_TRYAGAIN";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_SYNC_ENTER_TIMEOUT)] = "ERROR_SYNC_ENTER_TIMEOUT";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_SYNC_LEAVE_INVHANDLE)] = "ERROR_SYNC_LEAVE_INVHANDLE";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_SYNC_LEAVE_INVTASK)] = "ERROR_SYNC_LEAVE_INVTASK";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_MUTEX_INVCONTEXT)] = "ERROR_MUTEX_INVCONTEXT";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_MUTEX_NOTOWNER)] = "ERROR_MUTEX_NOTOWNER";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_EVENT_RECV_INVRECEIVER)] = "ERROR_EVENT_RECV_INVRECEIVER";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_EVENT_RECV_INVPTR)] = "ERROR_EVENT_RECV_INVPTR";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_EVENT_RECV_INVCONTEXT)] = "ERROR_EVENT_RECV_INVCONTEXT";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_EVENT_RECV_INVOPT)] = "ERROR_EVENT_RECV_INVOPT";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_EVENT_RECV_TIMEOUT)] = "ERROR_EVENT_RECV_TIMEOUT";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_EVENT_CLEAR_INVCONTEXT)] = "ERROR_EVENT_CLEAR_INVCONTEXT";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_QUEUE_CREATE_INVCONTEXT)] = "ERROR_QUEUE_CREATE_INVCONTEXT";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_QUEUE_CREATE_NOQUE)] = "ERROR_QUEUE_CREATE_NOQUE";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_QUEUE_DELETE_INVCONTEXT)] = "ERROR_QUEUE_DELETE_INVCONTEXT";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_QUEUE_DELETE_INVHANDLE)] = "ERROR_QUEUE_DELETE_INVHANDLE";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_QUEUE_SEND_INVHANDLE)] = "ERROR_QUEUE_SEND_INVHANDLE";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_QUEUE_SEND_FULL)] = "ERROR_QUEUE_SEND_FULL";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_QUEUE_RECV_INVHANDLE)] = "ERROR_QUEUE_RECV_INVHANDLE";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_QUEUE_EMPTY_INVHANDLE)] = "ERROR_QUEUE_EMPTY_INVHANDLE";
    g_errstr_MODULE_SYNC[MODULE_ERROR(ERROR_QUEUE_FULL_INVHANDLE)] = "ERROR_QUEUE_FULL_INVHANDLE";

    g_errstr_array[MODULE_SYNC].available_ = 1;
    g_errstr_array[MODULE_SYNC].last_error_ = MODULE_ERROR(ERROR_QUEUE_FULL_INVHANDLE);
    g_errstr_array[MODULE_SYNC].error_array_ = g_errstr_MODULE_SYNC;
}
#include "errtask.h"

static const char *g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_VARIABLE_REMOVE_NOTFOUND) + 1];

void errstr_MODULE_TASK_init ()
{
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_CREATE_PRIOINUSE)] = "ERROR_TASK_CREATE_PRIOINUSE";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_CREATE_INVCONTEXT)] = "ERROR_TASK_CREATE_INVCONTEXT";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_CREATE_INVPRIO)] = "ERROR_TASK_CREATE_INVPRIO";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_DELETE_INVCONTEXT)] = "ERROR_TASK_DELETE_INVCONTEXT";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_DELETE_INVHANDLE)] = "ERROR_TASK_DELETE_INVHANDLE";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_START_INVHANDLE)] = "ERROR_TASK_START_INVHANDLE";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_START_INVOP)] = "ERROR_TASK_START_INVOP";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_RESTART_INVHANDLE)] = "ERROR_TASK_RESTART_INVHANDLE";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_RESTART_INVOP)] = "ERROR_TASK_RESTART_INVOP";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_SUSPEND_INVHANDLE)] = "ERROR_TASK_SUSPEND_INVHANDLE";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_SUSPEND_NOTSTARTED)] = "ERROR_TASK_SUSPEND_NOTSTARTED";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_RESUME_INVHANDLE)] = "ERROR_TASK_RESUME_INVHANDLE";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_RESUME_NOTSUSPENDED)] = "ERROR_TASK_RESUME_NOTSUSPENDED";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_SLEEP_INVCONTEXT)] = "ERROR_TASK_SLEEP_INVCONTEXT";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_STACK_INVHANDLE)] = "ERROR_TASK_STACK_INVHANDLE";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_STACK_INVCONTEXT)] = "ERROR_TASK_STACK_INVCONTEXT";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_WAIT_TIMEOUT)] = "ERROR_TASK_WAIT_TIMEOUT";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_DUMP_INVCONTEXT)] = "ERROR_TASK_DUMP_INVCONTEXT";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_HOOK_CREATE_NOROOM)] = "ERROR_TASK_HOOK_CREATE_NOROOM";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_HOOK_CREATE_NOTFOUND)] = "ERROR_TASK_HOOK_CREATE_NOTFOUND";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_HOOK_SWITCH_NOROOM)] = "ERROR_TASK_HOOK_SWITCH_NOROOM";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_HOOK_SWITCH_NOTFOUND)] = "ERROR_TASK_HOOK_SWITCH_NOTFOUND";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_HOOK_DELETE_NOROOM)] = "ERROR_TASK_HOOK_DELETE_NOROOM";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_HOOK_DELETE_NOTFOUND)] = "ERROR_TASK_HOOK_DELETE_NOTFOUND";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_VARIABLE_ADD_INVTASK)] = "ERROR_TASK_VARIABLE_ADD_INVTASK";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_VARIABLE_ADD_NOVAR)] = "ERROR_TASK_VARIABLE_ADD_NOVAR";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_VARIABLE_REMOVE_INVTASK)] = "ERROR_TASK_VARIABLE_REMOVE_INVTASK";
    g_errstr_MODULE_TASK[MODULE_ERROR(ERROR_TASK_VARIABLE_REMOVE_NOTFOUND)] = "ERROR_TASK_VARIABLE_REMOVE_NOTFOUND";

    g_errstr_array[MODULE_TASK].available_ = 1;
    g_errstr_array[MODULE_TASK].last_error_ = MODULE_ERROR(ERROR_TASK_VARIABLE_REMOVE_NOTFOUND);
    g_errstr_array[MODULE_TASK].error_array_ = g_errstr_MODULE_TASK;
}
#include "errmod.h"

static const char *g_errstr_MODULE_MODULE[MODULE_ERROR(ERROR_MODULE_DOWN_FAILURE) + 1];

void errstr_MODULE_MODULE_init ()
{
    g_errstr_MODULE_MODULE[MODULE_ERROR(ERROR_MODULE_REG_INVMODULE)] = "ERROR_MODULE_REG_INVMODULE";
    g_errstr_MODULE_MODULE[MODULE_ERROR(ERROR_MODULE_REG_INVLEVEL)] = "ERROR_MODULE_REG_INVLEVEL";
    g_errstr_MODULE_MODULE[MODULE_ERROR(ERROR_MODULE_REG_INVCB)] = "ERROR_MODULE_REG_INVCB";
    g_errstr_MODULE_MODULE[MODULE_ERROR(ERROR_MODULE_REGISTERED)] = "ERROR_MODULE_REGISTERED";
    g_errstr_MODULE_MODULE[MODULE_ERROR(ERROR_MODULE_INIT_FAILURE)] = "ERROR_MODULE_INIT_FAILURE";
    g_errstr_MODULE_MODULE[MODULE_ERROR(ERROR_MODULE_UP_FAILURE)] = "ERROR_MODULE_UP_FAILURE";
    g_errstr_MODULE_MODULE[MODULE_ERROR(ERROR_MODULE_DOWN_FAILURE)] = "ERROR_MODULE_DOWN_FAILURE";

    g_errstr_array[MODULE_MODULE].available_ = 1;
    g_errstr_array[MODULE_MODULE].last_error_ = MODULE_ERROR(ERROR_MODULE_DOWN_FAILURE);
    g_errstr_array[MODULE_MODULE].error_array_ = g_errstr_MODULE_MODULE;
}

static void errstr_init ()
{
    errstr_MODULE_TIMER_init ();
    errstr_MODULE_MPOOL_init ();
    errstr_MODULE_HEAP_init ();
    errstr_MODULE_CTRLC_init ();
    errstr_MODULE_CONSOLE_init ();
    errstr_MODULE_CLOCK_init ();
    errstr_MODULE_DEVICE_init ();
    errstr_MODULE_SYNC_init ();
    errstr_MODULE_TASK_init ();
    errstr_MODULE_MODULE_init ();
}
